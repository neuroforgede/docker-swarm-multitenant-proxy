#!/usr/bin/env node
/* eslint-disable @typescript-eslint/no-var-requires */
// from https://github.com/BretFisher/node-docker-good-defaults

const app = require("../app").app;

// Constants
const PORT = process.env.PORT || 8080;
// if you're not using docker-compose for local development, this will default to 8080
// to prevent non-root permission problems with 80. Dockerfile is set to make this 80
// because containers don't have that issue :)

let server;
const TLS_DISABLED = process.env.TLS_DISABLED === '1' || process.env.TLS_DISABLED === 'true';
if (!TLS_DISABLED) {
  const fs = require('fs');
  const https = require('https');
  console.log('TLS is enabled');

  if (!process.env.TLS_KEY_FILE || !process.env.TLS_CERT_FILE || !process.env.TLS_CA_FILE) {
    console.error('ERROR: TLS is enabled but one or more of the following environment variables are not set: TLS_KEY_FILE, TLS_CERT_FILE, TLS_CA_FILE');
    process.exit(1); // Exit the process with an error code
  }

  const options = {
    key: fs.readFileSync(process.env.TLS_KEY_FILE),
    cert: fs.readFileSync(process.env.TLS_CERT_FILE),
    ca: fs.readFileSync(process.env.TLS_CA_FILE),
    requestCert: true, // Server will request a certificate from clients - this is required for docker authentication
    rejectUnauthorized: true // Reject any connection not authorized with the CA certificate
  };

  if (process.env.TLS_CRL_FILE) {
    options.crl = fs.readFileSync(process.env.TLS_CRL_FILE); // Add the CRL file if it exists
  }

  server = https.createServer(options, app);
  server.listen(PORT, function () {
    console.log(`Docker Swarm Multitenant Proxy is ready and listening on port ${PORT}`);
  });
} else {
  console.warn('WARNING: TLS is disabled. Only use this in development.');
  server = app.listen(PORT, function () {
    console.log(`Docker Swarm Multitenant Proxy is ready and listening on port ${PORT}`);
  });
}

//
// need this in docker container to properly exit since node doesn't handle SIGINT/SIGTERM
// this also won't work on using npm start since:
// https://github.com/npm/npm/issues/4603
// https://github.com/npm/npm/pull/10868
// https://github.com/RisingStack/kubernetes-graceful-shutdown-example/blob/master/src/index.js
// if you want to use npm then start with `docker run --init` to help, but I still don't think it's
// a graceful shutdown of node process
//

// quit on ctrl-c when running docker in terminal
process.on("SIGINT", function onSigint() {
  console.log(
    "Got SIGINT (aka ctrl-c in docker). Graceful shutdown ",
    new Date().toISOString()
  );
  shutdown();
});

// quit properly on docker stop
process.on("SIGTERM", function onSigterm() {
  console.log(
    "Got SIGTERM (docker container stop). Graceful shutdown ",
    new Date().toISOString()
  );
  shutdown();
});

const sockets = {};
let nextSocketId = 0;
server.on("connection", function (socket) {
  const socketId = nextSocketId++;
  sockets[socketId] = socket;

  socket.once("close", function () {
    delete sockets[socketId];
  });
});

// shut down server
function shutdown() {
  //   metricsServer.close();
  waitForSocketsToClose(10);

  server.close(function onServerClosed(err) {
    if (err) {
      console.error(err);
      process.exitCode = 1;
    }
    process.exit();
  });
}

function waitForSocketsToClose(counter) {
  if (counter > 0) {
    console.log(
      `Waiting ${counter} more ${counter !== 1 ? "seconds" : "second"
      } for all connections to close...`
    );
    return setTimeout(waitForSocketsToClose, 1000, counter - 1);
  }

  console.log("Forcing all connections to close now");
  for (const socketId in sockets) {
    sockets[socketId].destroy();
  }
}
